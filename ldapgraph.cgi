#!/usr/bin/perl -w

# Simple CGI script to display information from the RRD files generated by ldapgraph.pl

use strict;
use Config::General;
use RRDs;
use POSIX qw(uname);
use CGI;
use CGI::Pretty;

my $config_file = 'ldapgraph.conf';
my $version = "0.2a";

my %config;
sub readconfig
{
	my $conf = new Config::General($config_file);
	%config  = $conf->getall;
}

my $q = new CGI;

my $xpoints = 800;
my $points_per_sample = 3;
my $ypoints = 160;
my $baserrd = '/var/lib/ldapgraph/';
my $rrd = '';

my $scriptname = (split('/', $ENV{SCRIPT_NAME}))[2];
my $tmp_dir = '/tmp/' . (split('/', $ENV{SCRIPT_NAME}))[1] . '_' . $version;

my @functions = ("misc", "byte","binds", "connections","mods");

my @graphs = (
	{ title => 'Daily',   seconds => 3600*24,        },
	{ title => 'Weekly',  seconds => 3600*24*7,      },
	{ title => 'Monthly', seconds => 3600*24*31,     },
	{ title => 'Yearly',  seconds => 3600*24*365, },
);

my %color = (
	grey     => '999999',
	green    => '009900',
	red      => 'AA0000',
	purple	 => 'DD00DD',
	blue	 => '000080',
	yellow   => 'DDBB00',
);


sub htmlgraph
{
  my ($server) = @_;

  print $q->h2('Displaying graphs for ' . $server);

  for my $n (0..$#graphs) {
    print $q->div({-style =>'background: #dddddd; width: 1121px'},
		  $q->h3($graphs[$n]{title})
		 );
    foreach my $i (@functions){
      print $q->p($q->img({-src=>$scriptname. '?img=' . $server . '&function=' . $i . '&time=' . $graphs[$n]{seconds}}));
    }
  }
}

sub htmlheader()
{
  print $q->header('text/html'),
    $q->start_html(-title=>'LDAP Server statistics',
		   -author=>'esben@ofn.dk',
		   -head=>[
			   $q->meta({-http_equiv => 'Pragma', -content => 'no-cache'}),
			   $q->meta({-http_equiv => 'Refresh', -content => '300'})
			  ]
		  );
  my $tmp = $config{'server'};

  print $q->h1('LDAP Server Statistics'),
   $q->start_form(-method => 'post', -action=> $q->url),
    $q->p('Please select a server: ',
	  $q->popup_menu(-name => 'server',
			 -values => \@$tmp,
			 -default => @$tmp[0]),
	  $q->submit(-name => 'update',
		     -value => 'update'
		    ),
	 ),
	   $q->end_form();
}

sub htmlfooter()
{

  print "<hr align='left' size='1' noshade />";

#  print $q->br();
  print $q->a({-href=>'http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/'},
	      $q->img({-border=>'0', -src=>'http://people.ethz.ch/~oetiker/webtools/rrdtool/.pics/rrdtool.gif', -alt=>'RRDTool Webpage'})
	     ),
	       $q->end_html;

}


sub rrd_graph(@)
{
	my ($range, $file, $ypoints, @rrdargs) = @_;
	my $step = $range*$points_per_sample/$xpoints;
	# choose carefully the end otherwise rrd will maybe pick the wrong RRA:
	my $end  = time; $end -= $end % $step;
	my $date = localtime(time);
	$date =~ s|:|\\:|g unless $RRDs::VERSION < 1.199908;

	my ($graphret,$xs,$ys) = RRDs::graph($file,
		'--imgformat', 'PNG',
		'--width', $xpoints,
		'--height', $ypoints,
		'--start', "-$range",
		'--end', $end,
		'--vertical-label', '#',
		'--lower-limit', 0,
		'--units-exponent', 0, # don't show milli-messages/s
		'--lazy',
		'--color', 'SHADEA#ffffff',
		'--color', 'SHADEB#ffffff',
		'--color', 'BACK#ffffff',

		$RRDs::VERSION < 1.2002 ? () : (
			'--slope-mode'
		),

		@rrdargs,

		'COMMENT:['.$date.']\r',
	);

	my $ERR=RRDs::error;
	die "ERROR: $ERR\n" if $ERR;
}

sub graph_misc($$$)
{
        my ($range, $file,$rrdname) = @_;
	$rrd = $baserrd . $rrdname;
        my $step = $range*$points_per_sample/$xpoints;
        rrd_graph($range, $file, $ypoints,
		"DEF:pdu=$rrd:pdus:AVERAGE",
		"DEF:maxpdu=$rrd:pdus:MAX",
		"CDEF:rpdu=pdu,300,*",
		"CDEF:rmaxpdu=maxpdu,300,*",

		"DEF:sch=$rrd:searches:AVERAGE",
		"DEF:maxsch=$rrd:searches:MAX",
		"CDEF:rsch=sch,300,*",
		"CDEF:rmaxsch=maxsch,300,*",

		"DEF:ent=$rrd:entries:AVERAGE",
		"DEF:maxent=$rrd:entries:MAX",
		"CDEF:rent=ent,300,*",
		"CDEF:rmaxent=maxent,300,*",

		"DEF:ops=$rrd:operations:AVERAGE",
		"DEF:maxops=$rrd:operations:MAX",
		"CDEF:rops=ops,300,*",
		"CDEF:rmaxops=maxops,300,*",
 
		# Pretty print        
		"LINE:rpdu#$color{green}:PDUs \t\t",
		'GPRINT:rpdu:AVERAGE:Average\: %.0lf\t\t',
                'GPRINT:rmaxpdu:MAX:max\: %.0lf\l',

		"LINE:rsch#$color{blue}:Searches \t\t",
		'GPRINT:rsch:AVERAGE:Average\: %.0lf\t\t',
                'GPRINT:rmaxsch:MAX:max\: %.0lf\l',

		"LINE:rent#$color{red}:Entries \t\t",
		'GPRINT:rent:AVERAGE:Average\: %.0lf\t\t',
                'GPRINT:rmaxent:MAX:max\: %.0lf\l',

		"AREA:rops#$color{grey}:Operations \t",
		'GPRINT:rops:AVERAGE:Average\: %.0lf\t\t',
                'GPRINT:rmaxops:MAX:max\: %.0lf\l',

        );
}

sub graph_byte($$$)
{
	my ($range, $file,$rrdname) = @_;
        $rrd = $baserrd . $rrdname;
        my $step = $range*$points_per_sample/$xpoints;
        rrd_graph($range, $file, $ypoints,
		  "DEF:byte=$rrd:bytes:AVERAGE",
		  "DEF:maxbyte=$rrd:bytes:MAX",
		  "CDEF:rbyte=byte,300,*",
		  "CDEF:rmaxbyte=maxbyte,300,*",

		  "LINE:rbyte#$color{purple}:Bytes \t\t",
		  'GPRINT:rbyte:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxbyte:MAX:max\: %.0lf\l',
		  );
}



sub graph_binds($$$)
{
	my ($range, $file,$rrdname) = @_;
        $rrd = $baserrd . $rrdname ;
        my $step = $range*$points_per_sample/$xpoints;
        rrd_graph($range, $file, $ypoints,
		  "DEF:bind=$rrd:binds:AVERAGE",
		  "DEF:maxbind=$rrd:binds:MAX",
		  "CDEF:rbind=bind,300,*",
		  "CDEF:rmaxbind=maxbind,300,*",

		  "DEF:unbind=$rrd:unbinds:AVERAGE",
		  "DEF:maxunbind=$rrd:unbinds:MAX",
		  "CDEF:runbind=unbind,300,*",
		  "CDEF:rmaxunbind=maxunbind,300,*",

		  #Pretty print
		  "AREA:rbind#$color{green}:Binds \t\t",
		  'GPRINT:rbind:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxbind:MAX:max\: %.0lf\l',

		  "LINE:runbind#$color{blue}:Unbinds \t\t",
		  'GPRINT:runbind:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxunbind:MAX:max\: %.0lf\l',
		  );
}

sub graph_connections($$$)
{
	my ($range, $file,$rrdname) = @_;
        $rrd = $baserrd . $rrdname ;
        my $step = $range*$points_per_sample/$xpoints;
        rrd_graph($range, $file, $ypoints,
		  "DEF:con=$rrd:curcon:AVERAGE", # Gauge type
		  "DEF:maxcon=$rrd:curcon:MAX",

		  "DEF:totcon=$rrd:totalcon:AVERAGE",
		  "DEF:maxtotcon=$rrd:totalcon:MAX",
		  "CDEF:rtotcon=totcon,300,*",
		  "CDEF:rmaxtotcon=maxtotcon,300,*",

		  "DEF:read=$rrd:read:AVERAGE", # Gauge type
		  "DEF:maxread=$rrd:read:MAX",

		  #Pretty printing
		  "AREA:con#$color{green}:Connections \t",
		  'GPRINT:con:AVERAGE:Average\: %.0lf\t',
		  'GPRINT:maxcon:MAX:max\: %.0lf\l',

		  "LINE:rtotcon#$color{blue}:Total Connections",
		  'GPRINT:rtotcon:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxtotcon:MAX:max\: %.0lf\l',

		  "LINE:read#$color{purple}:Read Waits \t",
		  'GPRINT:read:AVERAGE:Average\: %.0lf\t',
		  'GPRINT:maxread:MAX:max\: %.0lf\l',

		  );
}


sub graph_mods($$$)
{
	my ($range, $file,$rrdname) = @_;
        $rrd = $baserrd . $rrdname ;

        my $step = $range*$points_per_sample/$xpoints;
        rrd_graph($range, $file, $ypoints,
		  "DEF:mod=$rrd:mods:AVERAGE",
		  "DEF:maxmod=$rrd:mods:MAX",
		  "CDEF:rmod=mod,300,*",
		  "CDEF:rmaxmod=maxmod,300,*",

		  "DEF:modrd=$rrd:modrdns:AVERAGE",
		  "DEF:maxmodrd=$rrd:modrdns:MAX",
		  "CDEF:rmodrd=modrd,300,*",
		  "CDEF:rmaxmodrd=maxmodrd,300,*",

		  "DEF:add=$rrd:adds:AVERAGE",
		  "DEF:maxadd=$rrd:adds:MAX",
		  "CDEF:radd=add,300,*",
		  "CDEF:rmaxadd=maxadd,300,*",

		  "DEF:del=$rrd:deletes:AVERAGE",
		  "DEF:maxdel=$rrd:deletes:MAX",
		  "CDEF:rdel=del,300,*",
		  "CDEF:rmaxdel=maxdel,300,*",

		  #Pretty print
		  "LINE:rmod#$color{green}:Mods \t\t",
		  'GPRINT:mod:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxmod:MAX:max\: %.0lf\l',

		  "LINE:rmodrd#$color{yellow}:ModRDNs \t\t",
		  'GPRINT:modrd:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxmodrd:MAX:max\: %.0lf\l',

		  "LINE:radd#$color{blue}:Adds \t\t",
		  'GPRINT:add:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxadd:MAX:max\: %.0lf\l',

		  "LINE:rdel#$color{purple}:Deletes \t",
		  'GPRINT:del:AVERAGE:Average\: %.0lf\t\t',
		  'GPRINT:rmaxdel:MAX:max\: %.0lf\l',

		  );
}

sub send_image($)
{
	my ($file)= @_;

	-r $file or do {
		print "Content-type: text/plain\n\nERROR: can't find $file\n";
		exit 1;
	};

	print "Content-type: image/png\n";
	print "Content-length: ".((stat($file))[7])."\n";
	print "\n";
	open(IMG, $file) or die;
	my $data;
	print $data while read(IMG, $data, 16384)>0;
}


sub creategraph
{
  my ($function,$range, $file,$rrdname) = @_;

 SWITCH: {
    if ($function eq 'misc') { graph_misc($range,$file, $rrdname) ; last SWITCH; }
    if ($function eq 'connections') { graph_connections($range,$file, $rrdname) ; last SWITCH; }
    if ($function eq 'mods') { graph_mods($range,$file, $rrdname) ; last SWITCH; }
    if ($function eq 'binds') { graph_binds($range,$file, $rrdname) ; last SWITCH; }
    if ($function eq 'byte') { graph_byte($range,$file, $rrdname) ; last SWITCH; }
  }
}



sub main()
{
  readconfig;

  my $file = '';

  mkdir $tmp_dir, 0777 unless -d $tmp_dir;
  mkdir "$tmp_dir/$version/", 0777 unless -d "$tmp_dir/$version";

  if ($q->param('server')){
    htmlheader();
    htmlgraph($q->param('server'));
    htmlfooter();
  }
  elsif ($q->param('img') && $q->param('function') && $q->param('time')) {
    my $tmpfile= $tmp_dir . '/' . $q->param('img') . '_' . $q->param('function') . '_' . $q->param('time') .  '.png';
    creategraph($q->param('function'),int($q->param('time')),$tmpfile,$q->param('img'));
    send_image($tmpfile);
  }
  else {
    htmlheader();
    htmlfooter();
  }
}

main;
